# Getting Started

## Project Structure

The project follows a specific structure to maintain compatibility with MkDocs Material while providing enhanced features:

```
your-project/
├── mkdocs/              # Your documentation root
│   ├── mkdocs.yml      # MkDocs configuration file
│   └── docs/           # Documentation markdown files
│       └── **/*.md     # Markdown files in any subdirectory
├── components/         # React components
├── lib/               # Utility functions
└── public/            # Public assets
```

## Setup Instructions

1. Create the basic directory structure:

```bash
mkdir -p mkdocs/docs
```

2. Place your `mkdocs.yml` file in the `mkdocs` directory.

3. Place all your markdown files in the `mkdocs/docs` directory, maintaining your desired structure.

4. Run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

5. Open [http://localhost:3000](http://localhost:3000) to see your documentation site.

## MkDocs Material Compatibility

This project is designed as a drop-in replacement for MkDocs Material. You can take any existing MkDocs Material project and:

1. Copy your existing `mkdocs.yml` into the `mkdocs` directory
2. Copy your markdown files into the `mkdocs/docs` directory
3. Run the development server

Everything should work as expected, with the added benefits of Next.js performance and modern features.
import { visit } from 'unist-util-visit'
import { Node } from 'unist'
import { Plugin } from 'unified'

interface FootnoteDefinition extends Node {
  type: 'footnoteDefinition'
  identifier: string
  children: Node[]
}

interface FootnoteReference extends Node {
  type: 'footnoteReference'
  identifier: string
  data?: {
    footnoteContent?: string
  }
}

export const remarkFootnotes: Plugin = function() {
  return function transformer(tree) {
    // First pass: collect all footnote definitions
    const definitions: Record<string, string> = {}
    
    visit(tree, 'footnoteDefinition', (node: FootnoteDefinition) => {
      // Extract text content from definition
      let content = ''
      visit(node, 'text', (textNode: any) => {
        content += textNode.value
      })
      definitions[node.identifier] = content.trim()
    })

    // Second pass: attach content to references
    visit(tree, 'footnoteReference', (node: FootnoteReference) => {
      if (definitions[node.identifier]) {
        node.data = node.data || {}
        node.data.footnoteContent = definitions[node.identifier]
      }
    })
  }
}
